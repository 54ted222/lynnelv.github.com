<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://localhost:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-05-15T20:16:39+08:00</updated><id>http://localhost:4000//</id><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">jmeter主要的常用功能介绍</title><link href="http://localhost:4000/jmeter" rel="alternate" type="text/html" title="jmeter主要的常用功能介绍" /><published>2017-05-11T00:00:00+08:00</published><updated>2017-05-11T00:00:00+08:00</updated><id>http://localhost:4000/jmeter</id><content type="html" xml:base="http://localhost:4000/jmeter">&lt;p&gt;
	前段时间，哦，不，应该说是前几个月，研究了下测试工具jmeter的使用。时隔已久，今天临时需要测试一批接口的返回码，自然想起了用jmeter啊，但是发现有些用法不太记得了。。。故翻以前的笔记整理一下，记之。
&lt;/p&gt;
&lt;p&gt;
	关于jmeter的介绍就不多说了（其实是我也没有很熟悉它），安装很简单，依赖java环境，蒽，自然可以跨平台使用。jmeter操作步骤基本是：创建一个测试计划，配置，执行测试计划，然后分析结果。
&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;
		&lt;dl&gt;
			&lt;dt&gt;1. 添加测试计划&lt;/dt&gt;
			&lt;dd&gt;
				&lt;img src=&quot;../img/article/jmeter/test-plan.png&quot;&gt;
				&lt;p&gt;这里设置的是全局变量，能在整个测试plan访问到。&lt;/p&gt;
			&lt;/dd&gt;
		&lt;/dl&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;dl&gt;
			&lt;dt&gt;2. 添加线程组&lt;/dt&gt;
			&lt;dd&gt;
				&lt;ul&gt;
					&lt;li&gt;线程数：执行测试计划的线程数。&lt;/li&gt;
					&lt;li&gt;ramp-up period：启动所有线程的耗时，如线程数是100，启动时长设置10，则1s启动10个线程。&lt;/li&gt;
					&lt;li&gt;循环次数：单线程发送请求的次数，如线程数是100，循环10次，则总请求数等于1000。&lt;/li&gt;
				&lt;/ul&gt;
			&lt;/dd&gt;
		&lt;/dl&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;dl&gt;
			&lt;dt&gt;3. 添加配置元件&lt;/dt&gt;
			&lt;dd&gt;
				&lt;p&gt;
					&lt;b&gt;http请求默认值&lt;/b&gt;：默认所有请求都自动带上所设置的参数。
				&lt;/p&gt;
				&lt;img src=&quot;../img/article/jmeter/default-param.png&quot;&gt;
			&lt;/dd&gt;
		&lt;/dl&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;dl&gt;
			&lt;dt&gt;4. 后置处理器&lt;/dt&gt;
			&lt;ul&gt;
				&lt;li&gt;
					&lt;dl&gt;
						&lt;dt&gt;正则提取器：&lt;/dt&gt;
						&lt;dd&gt;
							提取返回结果作为下一个请求的入参。
							&lt;img src=&quot;../img/article/jmeter/regex-extractor.png&quot;&gt;
							&lt;p class=&quot;warn-text&quot;&gt;如果提取结果是一个数组，需要自动循环下个请求，这时候就要配合forEach控制器使用。&lt;/p&gt;
							&lt;p&gt;&lt;b&gt;loop start index&lt;/b&gt;: 1&lt;/p&gt;
							&lt;p&gt;&lt;b&gt;loop end index&lt;/b&gt;: &lt;code&gt;${id_arr_matchNr}&lt;/code&gt;&lt;/p&gt;
							&lt;p&gt;&lt;b&gt;loop variable&lt;/b&gt;: id&lt;/p&gt;
							&lt;img src=&quot;../img/article/jmeter/foreach.png&quot;&gt;
							&lt;p&gt;
								其中result为上个请求的返回结果集，下个请求通过&lt;code&gt;${id}&lt;/code&gt;引用单个结果。
							&lt;/p&gt;
							&lt;img src=&quot;../img/article/jmeter/next-req.png&quot;&gt;
						&lt;/dd&gt;
					&lt;/dl&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
		&lt;/dl&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;dl&gt;
			&lt;dt&gt;5. 监听器&lt;/dt&gt;
			&lt;dd&gt;
				&lt;ul&gt;
					&lt;li&gt;
						&lt;dl&gt;
							&lt;dt&gt;察看结果树：&lt;/dt&gt;
							&lt;dd&gt;
								查看每个请求的详细情况。
							&lt;/dd&gt;
							&lt;img src=&quot;../img/article/jmeter/graphic.png&quot;&gt;
						&lt;/dl&gt;
					&lt;/li&gt;
					&lt;li&gt;
						&lt;dt&gt;PerfMon Metrics Collectot：&lt;/dt&gt;
						&lt;dd&gt;
							监控server的CPU、内存等指标，指定端口监听：&lt;br&gt;
							&lt;code&gt;java -jar ./CMDRunner.jar --tool PerfMonAgent --udp-port 8080 --tcp-port 8080&lt;/code&gt;
							&lt;img src=&quot;../img/article/jmeter/perfmon.png&quot;&gt;
						&lt;/dd&gt;
					&lt;/li&gt;
					&lt;li&gt;
						&lt;dt&gt;聚合报告：&lt;/dt&gt;
						&lt;dd&gt;
							&lt;img src=&quot;../img/article/jmeter/poly-report.png&quot;&gt;
							&lt;p&gt;- Label: 展示测试过程中所有执行的请求和控制器的聚合&lt;/p&gt;
							&lt;p&gt;- # Samples: 样例执行数量&lt;/p&gt;
							&lt;p&gt;- Average: 平均时间，单位: ms&lt;/p&gt;
							&lt;p&gt;- Median：中位数，50％用户的响应时间，单位: ms&lt;/p&gt;
							&lt;p&gt;- Min: 最小时间，单位: ms&lt;/p&gt;
							&lt;p&gt;- Max: 最大时间，单位: ms&lt;/p&gt;
							&lt;p&gt;- Error %: 错误率&lt;/p&gt;
							&lt;p&gt;- Throughput: 服务每秒处理的请求数据量&lt;/p&gt;
						&lt;/dd&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
			&lt;/dd&gt;
		&lt;/dl&gt;
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
	以上是使用过程中一些主要点的总结，我用到的功能还只是jmeter的一小部分，jmeter支持的测试类型不只HTTP请求，还有DB，junit等。本文只是介绍了一个完整测试计划的配置过程，作为一个非专业人员自己摸索，有错漏的地方，谢谢指正。
&lt;/p&gt;</content><category term="技术" /><category term="测试" /><category term="jmeter" /><summary type="html">本文就jmeter常用的、主要的功能作一个总结。</summary></entry><entry><title type="html">vue2表单验证插件のvee-validate</title><link href="http://localhost:4000/veevalidate" rel="alternate" type="text/html" title="vue2表单验证插件のvee-validate" /><published>2017-05-10T00:00:00+08:00</published><updated>2017-05-10T00:00:00+08:00</updated><id>http://localhost:4000/veevalidator</id><content type="html" xml:base="http://localhost:4000/veevalidate">&lt;p&gt;输入校验对fe来说再熟悉不过了，各种类库插件也蛮多，本文要介绍的是，基于目前很火的国人产框架Vue.js 2.0的表单验证插件 — vee-validate的常用方法，虽然&lt;a href=&quot;http://vee-validate.logaretm.com/index.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;官方API&lt;/a&gt;已经有比较详细的介绍，但有些细节还是比较隐藏的，这里分享一下&lt;/p&gt;
&lt;p&gt;还是按部就班吧，安装走起：&lt;/p&gt;
&lt;pre&gt;
	&lt;code class=&quot;language-javascript&quot;&gt;
	npm install vee-validate --save
	&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用方法很简单，直接引用&lt;/p&gt;
&lt;pre&gt;
	&lt;code class=&quot;language-javascript&quot;&gt;
	import Vue from 'vue'
	import VeeValidate from 'vee-validate'

	Vue.use(VeeValidate, {
		// 指定locale为中文
	  	locale: 'zh_CN'
	})
	&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以整理一个单独的组件来管理表单验证的相关代码。&lt;/p&gt;
&lt;pre&gt;
	&lt;code class=&quot;language-javascript&quot;&gt;
	import {Validator} from 'vee-validate'
	import cn from 'vee-validate/dist/locale/zh_CN'
	// 默认是en，这里添加中文的lang包
	Validator.addLocale(cn)
	// 自定义校验规则
	Validator.extend('chinese', {
		messages: {
			zh_CN: field =&gt; field + '格式不正确'
		},
		validate(value) {
			return /^[\u4E00-\u9FFF\u3400-\u4DFF]+$/.test(value)
		}
	})
	// 修改vee-validate默认的提示文案
	Validator.updateDictionary({
		zh_CN: {
		    messages: {
		        regex: field =&gt; field + '格式不正确'
		    }
		}
	});
	&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;vee-validate本身也有很多常用的校验规则可以选择，这里不累述了，直接参考&lt;a href=&quot;http://vee-validate.logaretm.com/rules.html#available-rules&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;关于表单控件的引用，这里有几个点：&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;data-vv-as - 指定显示给用户看的提示字段名，默认是使用name属性&lt;/li&gt;
	&lt;li&gt;v-validate - 校验规则，多个以“|”分隔&lt;/li&gt;
	&lt;li&gt;data-vv-validate-on - 指定触发校验的时机，默认是input、change事件时触发，如希望手动触发，设置为&lt;code&gt;none&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;name - name属性是必须的，否则无法触发校验&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
	&lt;code class=&quot;language-javascript&quot;&gt;
	&amp;lt;input type=&quot;text&quot; name=&quot;name&quot; data-vv-as=&quot;姓名&quot; v-validate=&quot;'required|chinese'&quot; data-vv-validate-on=&quot;blur&quot; v-model=&quot;name&quot;&amp;gt;
	&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后是错误提示了，&lt;em&gt;errors&lt;/em&gt;的常用api如下：&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;code&gt;has(field)&lt;/code&gt; - 指定字段是否有错误&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;first(field)&lt;/code&gt; - 返回指定字段的第一个错误信息&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;firstByRule(field, rule)&lt;/code&gt; - 返回指定字段某个校验规则的错误信息&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;any()&lt;/code&gt; - 当前表单校验是否有错误&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;add(file, msg, ruleRule)&lt;/code&gt; - 添加错误信息到errors对象&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;remove(field)&lt;/code&gt; - 清空指定字段的所有错误信息&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;clear()&lt;/code&gt; - 清空当前表单的所有错误信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;p.s: name字段的校验规则包括非空和中文，这里的效果是，非空不提示错误，只有填了非中文的值才提示错误信息，如果空值需要提示，那么用first()&lt;/p&gt;
&lt;pre&gt;
	&lt;code class=&quot;language-javascript&quot;&gt;
	&amp;lt;div class=&quot;error&quot; v-show=&quot;errors.firstByRule('name','chinese')&quot;&amp;gt;&amp;lt;/div&amp;gt;
	&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以上是通过data-*属性来触发校验，因为前面的&lt;code&gt;Vue.use(VeeValidate)&lt;/code&gt;已经在vue中注册了实例，也可以手动触发校验，如表单提交前手动校验：&lt;/p&gt;
&lt;pre&gt;
	&lt;code class=&quot;language-javascript&quot;&gt;
	this.$validator.validateAll().then(async (validateFlag) =&gt; {
        	if (!validateFlag) return
			this.$store.dispatch('showToast', {
				type: 'loading',
				message: '正在加载...'
			})
			await this.$store.dispatch('post', data)
      	}, err =&gt; {
      	})
	}
	&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我这里没有写校验规则，因为在控件上指定了，也可以通过js指定，那么调用就变成了&lt;code&gt;validator.validateAll()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
	&lt;code class=&quot;language-javascript&quot;&gt;
	const validator = new Validator({
		name: 'required|chinese',
		...
	})
	&lt;/code&gt;
&lt;/pre&gt;</content><category term="技术" /><category term="web" /><category term="vue.js" /><summary type="html">最近的项目前端是基于vue2.0，表单验证这块，用了vee-validate插件，本文是一些常用api总结。</summary></entry><entry><title type="html">足迹</title><link href="http://localhost:4000/travel-footprints" rel="alternate" type="text/html" title="足迹" /><published>2017-01-20T00:00:00+08:00</published><updated>2017-01-20T00:00:00+08:00</updated><id>http://localhost:4000/TravelMap</id><content type="html" xml:base="http://localhost:4000/travel-footprints">&lt;link href=&quot;/css/jquery-jvectormap-2.0.3.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;

&lt;p&gt;
	地图中的标记点，是我目前去过的地方，暂时还很少，离我的梦想『环游世界』还很遥远，希望短期目标『每年至少旅行一次』不会再落空。
&lt;/p&gt;

&lt;div id=&quot;map&quot;&gt;&lt;/div&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.staticfile.org/jquery/3.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/js/jquery-jvectormap-2.0.3.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/js/jquery-jvectormap-world-merc.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
	(function ($) {
		$('#map').vectorMap({
			map: 'world_merc',
			backgroundColor: '#a5bfdd',
          	selectedColor: '#333333',
	        selectedRegions: ['CN','MY'],
	        regionStyle: {
            	selected: {
	                fill: '#ed8d6c'
	            }
	        },
          	markerStyle: {
				initial: {
					fill: '#F8E23B',
			        stroke: '#383f47'
				}
			},
			markers: [
				{latLng: [21.11, 110.24], name: '湛江-2009'},
				{latLng: [25.17, 110.17], name: '桂林-2009'},
				{latLng: [29.35, 106.33], name: '重庆-2009-2013'},
				{latLng: [22.48, 108.19], name: '南宁-2010'},
				{latLng: [30.40, 104.04], name: '成都-2012'},
				{latLng: [23.08, 113.14], name: '广州-2012'},
				{latLng: [22.27, 113.47], name: '深圳-2012'},
				{latLng: [25.04, 102.42], name: '昆明-2013'},
				{latLng: [26.88, 100.23], name: '丽江-2013'},
				{latLng: [25.34, 100.13], name: '大理-2013'},
				{latLng: [39.55, 116.24], name: '北京-2013'},
				{latLng: [3.14, 101.68], name: '吉隆坡-2015,2016'},
				{latLng: [5.98, 116.07], name: '沙巴-2015,2016'},
			]
		});
	})(jQuery);
&lt;/script&gt;</content><category term="旅行" /><category term="旅行" /><summary type="html">记录我的旅行足迹，地图中的标记点，是我目前去过的地方。</summary></entry><entry><title type="html">我的2016</title><link href="http://localhost:4000/2016-summary" rel="alternate" type="text/html" title="我的2016" /><published>2017-01-20T00:00:00+08:00</published><updated>2017-01-20T00:00:00+08:00</updated><id>http://localhost:4000/2016Summary</id><content type="html" xml:base="http://localhost:4000/2016-summary">&lt;p&gt;时间你好快，好像什么事情都没做，又过去一年，折腾是我2016的标签。&lt;/p&gt;
&lt;p&gt;
	2015的年会结束之后，走出世界之窗的门口，我决定2016不要再持续这种颓废迷茫的日子。
这是我2016定的一些&lt;strong&gt;TODO-LIST&lt;/strong&gt;：
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;换个工作环境&lt;/li&gt;
	&lt;li&gt;出国旅游&lt;/li&gt;
	&lt;li&gt;周末没事多去泡书店&lt;/li&gt;
	&lt;li&gt;坚持每周几次锻炼&lt;/li&gt;
	&lt;li&gt;培养一项兴趣爱好（piano or dance or ...）&lt;/li&gt;
	&lt;li&gt;改掉（至少控制）说话不经大脑的毛病&lt;/li&gt;
	&lt;li&gt;23点准时上床睡觉&lt;/li&gt;
	&lt;li&gt;学会理财而不是理倒财&lt;/li&gt;
	&lt;li&gt;还有一些碎碎末的决定......&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;时间是检验『雄心壮志』的唯一标准。目前看来，我做到的只有三成不到，自我安慰下，可是总比0%好呀。&lt;/p&gt;
&lt;p&gt;
	&lt;strong&gt;11月9号&lt;/strong&gt; 我离开了待了3年的老东家&lt;strong&gt;百度&lt;/strong&gt;，结束了人生的第二份工作，
	选择总是一个取舍的过程，但愿我做了一个不是错的选择。离职之后的无业状态是一个很好的身心放松机会，
	因为没有太多时间准备，这次休假我又去了一次马来，上次去没有上岛，略遗憾，这次补回来了，
	在&lt;strong&gt;Mataking岛&lt;/strong&gt;待了几天，风景各种好。
&lt;/p&gt;
&lt;p&gt;
	周末泡书店这个计划，这2周才开始启动，之前一直懒癌上身，今年一定一定一定要坚持下来啊！！
	谁也不想变成自己鄙视的人，你肤浅无知粗俗不修边幅的样子自己都嫌弃，更何况别人。。。&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;
	坚持锻炼这个算是没有完全落空，从6月份下了keep之后，除了特殊时期、懒癌发作、休假，每周基本都有做1~2次，
	然而同事跟我说一周做少于3次等于没做，呵呵哒~为了不长成大腹便便的膘姨，不能再三天打鱼两天晒网了，
	毕竟好的东西都是不容易得到的。
&lt;/p&gt;
&lt;p&gt;
	对的，好的东西都是来之不易的，理财、心理学、设计、情商...我还有一堆东西要学，新的一年，任重道远。
	至于23点准时休息，完全没做到，失眠还愈加严重了，对，活该！
&lt;/p&gt;
&lt;p&gt;
	最后，2017做成的第一件小事，趁这两天有点自由时间，把博客重新整理了下，之前的内容都清空了，
	想到一句话，回头翻下之前空间的说说和日志，恨不得拍死自己，是有多没脑才写得出那些悲春伤秋的东西。
	至少我回头看是有这种感觉的，虽然另一种说法是那也是你自己的过去。重新开始吧。
&lt;/p&gt;</content><category term="随感" /><category term="总结" /><summary type="html">时间你好快，好像什么事情都没做，又过去一年，折腾是我的2016的标签。</summary></entry></feed>
